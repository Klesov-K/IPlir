
#include "cipher_base.h"
#include "common.h"
#include "stdafx.h"
#include "magma.h"
#include "kuznyechik.h"
#include "cipher_modes.h"
#include "message.h"
#include "test.h"
#include "IPlirKey.h"

Message encryptDecryptMessage(std::vector<uint8_t> &data) {
	GostKey key = { 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0xfe, 0xdc, 0xba, 0x98,
						0x76, 0x54, 0x32, 0x10, 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef };

	BlockCipherPtr kuzn_ptr = buildBlockCipher<Kuznyechik>(key);
	Message msg;
	msg.text_ = data;
	vector<uint8_t> control_ct =
	{
			0xf1, 0x95, 0xd8, 0xbe, 0xc1, 0x0e, 0xd1, 0xdb, 0xd5, 0x7b, 0x5f, 0xa2, 0x40, 0xbd, 0xa1, 0xb8,
			0x85, 0xee, 0xe7, 0x33, 0xf6, 0xa1, 0x3e, 0x5d, 0xf3, 0x3c, 0xe4, 0xb3, 0x3c, 0x45, 0xde, 0xe4,
			0xa5, 0xea, 0xe8, 0x8b, 0xe6, 0x35, 0x6e, 0xd3, 0xd5, 0xe8, 0x77, 0xf1, 0x35, 0x64, 0xa3, 0xa5,
			0xcb, 0x91, 0xfa, 0xb1, 0xf2, 0x0c, 0xba, 0xb6, 0xd1, 0xc6, 0xd1, 0x58, 0x20, 0xbd, 0xba, 0x73,
	};

	msg.nonce_ = { 0x12, 0x34, 0x56, 0x78, 0x90, 0xab, 0xce, 0xf0 };
	auto backup_msg = msg;

	cout << "\r\n\r\n\r\nPlain text" << std::endl << to_hex(msg.text_) << std::endl;
	CTR::encrypt(kuzn_ptr, msg, msg);
	cout << "\r\nEncrypted data" << std::endl << to_hex(msg.text_) << endl;
	check(msg.text_,control_ct);
	

	CTR::decrypt(kuzn_ptr, msg, msg);
	cout << "\r\nDecrypted data" << std::endl << to_hex(msg.text_) << endl;

	check(backup_msg.text_, msg.text_);
	return msg;
}

void createIPlirPacket() {
	GostKey key = { 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0xfe, 0xdc, 0xba, 0x98,
						0x76, 0x54, 0x32, 0x10, 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef };
	//BlockCipherPtr kuzn_ptr = buildBlockCipher<Kuznyechik>(key);
	IPlirKeyPtr ipkey_ptr = buildIPlirKey<IPlirKuznKey>(std::vector<UINT8>(key));
}

int main()
{
	cout << "Check ModelEncryptionGOST" << endl;


	//test_magma();

	//test_kuznyechik();

	//test_cmac_kuznyechik();

	test_ctr_kuznyechik();

	//test_mgm_magma();
	
	//test_gost89ctr();


	cout << "exit..." << endl;
	std::vector<uint8_t> msg;
	msg =
	{
			0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x00, 0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa, 0x99, 0x88,
			0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xee, 0xff, 0x0a,
			0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xee, 0xff, 0x0a, 0x00,
			0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xee, 0xff, 0x0a, 0x00, 0x11,
			0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x00, 0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa, 0x99, 0x88,
			0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xee, 0xff, 0x0a,
			0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xee, 0xff, 0x0a, 0x00,
			0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xee, 0xff, 0x0a, 0x00, 0x11,
	};
	auto e = encryptDecryptMessage(msg);

	return 0;
}
